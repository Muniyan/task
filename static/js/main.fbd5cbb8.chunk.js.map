{"version":3,"sources":["components/listCard.jsx","components/list.jsx","components/comments.jsx","components/card.jsx","components/createList.jsx","components/createCard.jsx","components/board.jsx","App.js","serviceWorker.js","index.js"],"names":["ListCard","props","_this","Object","classCallCheck","this","_super","call","updateState","key","value","sobj","setState","setItem","window","localStorage","getItem","handleDragStart","event","cardId","target","getAttribute","dataTransfer","setData","handleDragOver","preventDefault","stopPropagation","handleDrop","sourceId","getData","destinationId","newCards","curCardArr","state","card","curListId","listId","forEach","obj","index","id","sindex","dindex","tempObj","JSON","stringify","handleListInnerCard","catchedCard","localListId","length","map","cardObj","cardName","name","react_default","a","createElement","react_router_dom","className","to","pathname","search","draggable","data-card-id","onDragStart","onDragOver","onDrop","bind","assertThisInitialized","parse","wrapperId","Component","List","componentDidMount","trim","catchedList","handleDeleteList","list","listObj","splice","handleListInfo","data-list-id","onClick","listCard","renderRedirect","redirect","react_router","Fragment","Comments","componentWillReceiveProps","newProps","comments","localCardId","tempComments","handleDescChange","getFormattedTime","ms","timeArr","Date","split","handleAddComments","desc","commentsArr","alert","unshift","getTime","renderCommentsHistory","cobj","displayTime","type","placeholder","onChange","Card","isValid","values","queryString","location","cId","lId","cardArr","handleDeleteCard","components_comments","CreateList","handleChange","isListExists","isExists","localName","handleSubmit","push","onSubmit","CreateCard","isCardExists","localCard","localDesc","handleNameChange","rows","cols","Board","boardName","handleBoardSubmit","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fbd5cbb8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass ListCard extends Component {\n  // this.state.card ::: will be used for store cards details\n  // this.state.listId ::: will be used for fetch respective cards details for given listId\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      card: [],\n      listId: \"\"\n    };\n\n    this.handleDrop = this.handleDrop.bind(this);\n    this.handleDragOver = this.handleDragOver.bind(this);\n    this.handleDragStart = this.handleDragStart.bind(this);\n  }\n\n  // Fetch card details\n  // Update state info\n  componentDidMount() {\n    var listId = this.props.listId;\n    var catchedCard = this.getItem(\"zoomRx-card-\" + listId);\n    if (catchedCard && catchedCard.length > 0) {\n      catchedCard = JSON.parse(catchedCard);\n      this.updateState(\"listId\", listId);\n      this.updateState(\"card\", catchedCard);\n    }\n  }\n\n  // Update state info\n  updateState = (key, value) => {\n    let sobj = {};\n    sobj[key] = value;\n    this.setState(sobj);\n  };\n\n  // Set state info in local storage\n  setItem = (key, value) => {\n    window.localStorage.setItem(key, value);\n  };\n\n  // Fetch state info from local storage\n  getItem = key => {\n    return window.localStorage.getItem(key);\n  };\n\n  // Handle drag start event\n  handleDragStart = event => {\n    var cardId = event.target.getAttribute([\"data-card-id\"]);\n    event.dataTransfer.setData(\"text/plain\", cardId);\n  };\n\n  // Handle drag over event\n  handleDragOver = event => {\n    event.preventDefault();\n    event.stopPropagation();\n  };\n\n  // Handle drag drop event\n  handleDrop = event => {\n    event.preventDefault();\n    event.stopPropagation();\n    var sourceId = event.dataTransfer.getData(\"text/plain\");\n    var destinationId = event.target.getAttribute([\"data-card-id\"]);\n\n    let newCards = {};\n    var curCardArr = this.state.card;\n    var curListId = this.state.listId;\n    curCardArr.forEach((obj, index) => {\n      if (\"\" + obj.id === sourceId) {\n        newCards.sindex = index;\n      } else if (\"\" + obj.id === destinationId) {\n        newCards.dindex = index;\n      }\n    });\n\n    var sindex = newCards.sindex || 0;\n    var dindex = newCards.dindex || 0;\n    if (sindex > -1 && dindex > -1 && sindex !== dindex) {\n      var tempObj = curCardArr[sindex];\n      curCardArr[sindex] = curCardArr[dindex];\n      curCardArr[dindex] = tempObj;\n\n      this.updateState(\"card\", curCardArr);\n      this.setItem(\"zoomRx-card-\" + curListId, JSON.stringify(curCardArr));\n    }\n  };\n\n  // Render list of cards details in list view\n  handleListInnerCard = () => {\n    var catchedCard = this.state.card;\n    var localListId = this.state.listId;\n    if (catchedCard != null && catchedCard.length > 0) {\n      return catchedCard.map(cardObj => {\n        var cardId = cardObj.id;\n        var cardName = cardObj.name;\n        return (\n          <Link\n            className=\"ListCard-label\"\n            to={{\n              pathname: \"/card\",\n              search: \"?lId=\" + localListId + \"&cId=\" + cardId\n            }}\n            key={cardId}\n            draggable=\"true\"\n            data-card-id={cardId}\n            onDragStart={this.handleDragStart}\n            onDragOver={this.handleDragOver}\n            onDrop={this.handleDrop}\n          >\n            {cardName}\n          </Link>\n        );\n      });\n    }\n  };\n\n  // rendering UI\n  render() {\n    var localListId = this.state.listId;\n    var wrapperId = \"localListId_\" + localListId;\n    return (\n      <div id={wrapperId} className=\"w100 fleft\">\n        {this.handleListInnerCard()}\n      </div>\n    );\n  }\n}\n\nexport default ListCard;\n","import React, { Component } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport ListCard from \"./listCard\";\nimport \"../styles/list.css\";\n\nclass List extends Component {\n  // this.state.list ::: will be used for store list details\n  // this.state.name ::: will be used for assign board name\n  // this.state.redirect ::: will be used for redirect to list view if board is not created\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      list: [],\n      name: \"\",\n      redirect: false\n    };\n\n    this.handleDeleteList = this.handleDeleteList.bind(this);\n  }\n\n  // Fetch board name\n  // Fetch list details\n  componentDidMount = () => {\n    var name = window.localStorage.getItem(\"zoomRx-task\");\n    if (name && name.trim().length > 0) {\n      this.updateState(\"name\", name);\n      this.updateState(\"redirect\", false);\n    } else {\n      this.updateState(\"redirect\", true);\n    }\n\n    var catchedList = window.localStorage.getItem(\"zoomRx-list\");\n    if (catchedList != null && catchedList.length > 0) {\n      this.updateState(\"list\", JSON.parse(catchedList));\n    }\n  };\n\n  // Update state info\n  updateState = (key, value) => {\n    let sobj = {};\n    sobj[key] = value;\n    this.setState(sobj);\n  };\n\n  // Set state info in local storage\n  setItem = (key, value) => {\n    window.localStorage.setItem(key, value);\n  };\n\n  // Fetch state info from local storage\n  getItem = key => {\n    return window.localStorage.getItem(key);\n  };\n\n  // Handle delete list\n  handleDeleteList = event => {\n    event.preventDefault();\n    var catchedList = this.state.list;\n    var listId = event.target.getAttribute([\"data-list-id\"]);\n\n    catchedList.forEach((listObj, index) => {\n      if (listId === \"\" + listObj.id) {\n        catchedList.splice(index, 1);\n      }\n    });\n\n    this.updateState(\"list\", catchedList);\n    this.setItem(\"zoomRx-list\", JSON.stringify(catchedList));\n  };\n\n  // Iterate list details\n  handleListInfo = () => {\n    var catchedList = this.state.list;\n    if (catchedList != null && catchedList.length > 0) {\n      return catchedList.map(listObj => {\n        return (\n          <div className=\"List-details fleft\" key={listObj.id}>\n            <label className=\"List-name fleft\">{listObj.name}</label>\n            <label\n              className=\"List-delete fright tcenter cpointer text-overflow\"\n              data-list-id={listObj.id}\n              onClick={this.handleDeleteList}\n            >\n              Delete this List...\n            </label>\n\n            <ListCard listId={listObj.id} />\n\n            <Link\n              className=\"List-new-card cpointer text-overflow\"\n              to={{\n                pathname: \"/createcard\",\n                search: \"?lId=\" + listObj.id\n              }}\n            >\n              Add new Card...\n            </Link>\n          </div>\n        );\n      });\n    }\n  };\n\n  // Redirect to board view if board is not created\n  renderRedirect = () => {\n    if (this.state.redirect) {\n      return <Redirect to=\"/\" />;\n    }\n  };\n\n  // rendering UI\n  render() {\n    return (\n      <React.Fragment>\n        {this.renderRedirect()}\n        <div className=\"List-container\">\n          <label className=\"List-header\">\n            Sample Board : {this.state.name}\n          </label>\n          <div className=\"List-footer\">\n            {this.handleListInfo()}\n            <div className=\"List-add-detais\">\n              <Link\n                className=\"List-add fleft cpointer text-overflow\"\n                to=\"/createList\"\n              >\n                Add new List...\n              </Link>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default List;\n","import React, { Component } from \"react\";\nimport \"../styles/comments.css\";\n\nclass Comments extends Component {\n  // this.state.desc ::: will be used for store desc field\n  // this.state.comments ::: will be used for store comments field\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      desc: \"\",\n      comments: []\n    };\n\n    this.getFormattedTime = this.getFormattedTime.bind(this);\n    this.handleDescChange = this.handleDescChange.bind(this);\n    this.handleAddComments = this.handleAddComments.bind(this);\n  }\n\n  // Receive cardId from props and fetch comments history by using cardId\n  componentWillReceiveProps = newProps => {\n    var catchedComments = this.state.comments;\n    if (catchedComments.length === 0) {\n      var localCardId = \"\" + newProps.cardId;\n      if (localCardId && localCardId.trim().length > 0) {\n        let tempComments = this.getItem(\"zoomRx-comments-\" + localCardId);\n        if (tempComments && tempComments.trim().length > 0) {\n          this.updateState(\"comments\", JSON.parse(tempComments));\n        }\n      }\n    }\n  };\n\n  // Update state info\n  updateState = (key, value) => {\n    let sobj = {};\n    sobj[key] = value;\n    this.setState(sobj);\n  };\n\n  // Set state info in local storage\n  setItem = (key, value) => {\n    window.localStorage.setItem(key, value);\n  };\n\n  // Fetch state info from local storage\n  getItem = key => {\n    return window.localStorage.getItem(key);\n  };\n\n  // Handle desc field\n  handleDescChange = event => {\n    this.updateState(\"desc\", event.target.value);\n  };\n\n  // Convert milliseconds to display format\n  getFormattedTime = ms => {\n    var timeStr = \"\" + new Date(ms);\n    var timeArr = timeStr.split(\" \");\n    return timeArr[2] + \" \" + timeArr[1] + \" \" + timeArr[3];\n  };\n\n  // Add new comment\n  handleAddComments = event => {\n    var desc = this.state.desc;\n    var cardId = this.props.cardId;\n    var commentsArr = this.state.comments;\n    if (desc.length === 0) {\n      alert(\"Comment is required\");\n    } else if (desc.length > 2000) {\n      alert(\"Comments length cannot be more than 1000 character\");\n    } else {\n      commentsArr.unshift({ id: new Date().getTime(), desc: desc });\n      this.updateState(\"desc\", \"\");\n      this.updateState(\"comments\", commentsArr);\n      this.setItem(\"zoomRx-comments-\" + cardId, JSON.stringify(commentsArr));\n    }\n  };\n\n  // Render comments history\n  renderCommentsHistory = () => {\n    var catchedComments = this.state.comments;\n    return catchedComments.map(cobj => {\n      let displayTime = this.getFormattedTime(cobj.id);\n      return (\n        <div className=\"Comments-history-child\" key={cobj.id}>\n          <label className=\"Comments-history-desc\">{cobj.desc}</label>\n          <label className=\"Comments-history-time\">{displayTime}</label>\n        </div>\n      );\n    });\n  };\n\n  // rendering UI\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"Comments-container\">\n          <textarea\n            type=\"text\"\n            placeholder=\"add comments here\"\n            className=\"Comments-textarea\"\n            value={this.state.desc}\n            onChange={this.handleDescChange}\n          />\n          <label className=\"Comments-add\" onClick={this.handleAddComments}>\n            Add Comment\n          </label>\n          <div className=\"Comments-history\">{this.renderCommentsHistory()}</div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Comments;\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport Comments from \"./comments\";\nimport queryString from \"query-string\";\nimport \"../styles/card.css\";\n\nclass Card extends Component {\n  // this.state.card ::: will be used for store cards details\n  // this.state.listId ::: will be used for fetch respective cards details for given listId\n  // this.state.redirect ::: will be used for redirect to list view if board is not created\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      card: [],\n      listId: \"\",\n      redirect: false\n    };\n\n    this.handleDeleteCard = this.handleDeleteCard.bind(this);\n  }\n\n  // Fetch board name\n  // Fetch list details\n  componentDidMount = () => {\n    var catchedCard = {},\n      isValid = false;\n    const values = queryString.parse(this.props.location.search);\n    var cardId = values.cId;\n    var listId = values.lId;\n    if (listId != null && listId.trim().length > 0) {\n      var cardArr = this.getItem(\"zoomRx-card-\" + listId);\n      cardArr = JSON.parse(cardArr);\n\n      cardArr.forEach(cobj => {\n        if (cardId === \"\" + cobj.id) {\n          isValid = true;\n          catchedCard = cobj;\n        }\n      });\n\n      this.updateState(\"listId\", listId);\n      this.updateState(\"card\", catchedCard);\n      this.updateState(\"redirect\", !isValid);\n    }\n  };\n\n  // Update state info\n  updateState = (key, value) => {\n    let sobj = {};\n    sobj[key] = value;\n    this.setState(sobj);\n  };\n\n  // Set state info in local storage\n  setItem = (key, value) => {\n    window.localStorage.setItem(key, value);\n  };\n\n  // Fetch state info from local storage\n  getItem = key => {\n    return window.localStorage.getItem(key);\n  };\n\n  // Handle delete card\n  handleDeleteCard = event => {\n    var listId = this.state.listId;\n    var catchedCard = this.getItem(\"zoomRx-card-\" + listId);\n    var cardId = event.target.getAttribute([\"data-card-id\"]);\n    catchedCard = JSON.parse(catchedCard);\n    catchedCard.forEach((cardObj, index) => {\n      if (cardId === \"\" + cardObj.id) {\n        catchedCard.splice(index, 1);\n      }\n    });\n\n    this.updateState(\"redirect\", true);\n    this.updateState(\"card\", catchedCard);\n    this.setItem(\"zoomRx-card-\" + listId, JSON.stringify(catchedCard));\n  };\n\n  // Redirect to list view if card is not created\n  renderRedirect = () => {\n    if (this.state.redirect) {\n      return <Redirect to=\"/list\" />;\n    }\n  };\n\n  // rendering UI\n  render() {\n    var catchedCard = this.state.card;\n    return (\n      <React.Fragment>\n        {this.renderRedirect()}\n        <div className=\"Card-container\">\n          <label className=\"Card-header\">Sample Card</label>\n          <div className=\"Card-footer\">\n            <div className=\"Card-details fleft\" key={catchedCard.id}>\n              <label className=\"Card-name\">{catchedCard.name}</label>\n              <label className=\"Card-desc fleft\">{catchedCard.desc}</label>\n              <label\n                className=\"Card-delete fright cpointer tcenter text-overflow\"\n                data-card-id={catchedCard.id}\n                onClick={this.handleDeleteCard}\n              >\n                Delete Card\n              </label>\n            </div>\n\n            <Comments cardId={catchedCard.id} />\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nclass CreateList extends Component {\n  // this.state.name ::: will used for card name\n  // this.state.list ::: will be used for fetch list info\n  // this.state.redirect ::: will be used for redirect to list view if board is not created\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: \"\",\n      list: [],\n      redirect: false\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  // Fetch list info\n  componentDidMount = () => {\n    var catchedList = this.getItem(\"zoomRx-list\");\n    if (catchedList != null && catchedList.length > 0) {\n      this.updateState(\"list\", JSON.parse(catchedList));\n    }\n  };\n\n  // Update state info\n  updateState = (key, value) => {\n    let sobj = {};\n    sobj[key] = value;\n    this.setState(sobj);\n  };\n\n  // Set state info in local storage\n  setItem = (key, value) => {\n    window.localStorage.setItem(key, value);\n  };\n\n  // Fetch state info from local storage\n  getItem = key => {\n    return window.localStorage.getItem(key);\n  };\n\n  // Update state whenever user change name of list\n  handleChange = event => {\n    this.updateState(\"name\", event.target.value);\n  };\n\n  // Check whether list name already created or not\n  isListExists = () => {\n    var isExists = false;\n    var catchedList = this.state.list;\n    var localName = this.state.name;\n    localName = localName.trim();\n    catchedList.forEach(listObj => {\n      if (localName === listObj.name) {\n        isExists = true;\n      }\n    });\n    return isExists;\n  };\n\n  // Handle creat card info\n  handleSubmit = event => {\n    event.preventDefault();\n    var localName = this.state.name;\n    localName = localName.trim();\n    if (localName.length === 0) {\n      alert(\"List name is required\");\n    } else if (localName.length < 5) {\n      alert(\"List name must be at least 5 characters\");\n    } else if (this.isListExists()) {\n      alert(\"List name is already exists\");\n    } else {\n      var catchedList = this.state.list;\n      catchedList.push({ id: new Date().getTime(), name: localName });\n      this.setItem(\"zoomRx-list\", JSON.stringify(catchedList));\n      this.updateState(\"list\", catchedList);\n      this.updateState(\"redirect\", true);\n    }\n  };\n\n  // Redirect to list view if card is created by successfully\n  renderRedirect = () => {\n    if (this.state.redirect) {\n      return <Redirect to=\"/list\" />;\n    }\n  };\n\n  // rendering UI\n  render() {\n    return (\n      <React.Fragment>\n        {this.renderRedirect()}\n        <div className=\"Board-parent\">\n          <div className=\"Board-container\">\n            <form className=\"Board-main fleft\" onSubmit={this.handleSubmit}>\n              <label className=\"Board-label fleft\">Create List</label>\n              <input\n                className=\"Board-input\"\n                type=\"text\"\n                placeholder=\"List Name\"\n                value={this.state.name}\n                onChange={this.handleChange}\n              />\n              <button className=\"Board-button cpointer\">Create</button>\n            </form>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default CreateList;\n","import React, { Component } from \"react\";\nimport queryString from \"query-string\";\nimport { Redirect } from \"react-router-dom\";\n\nclass CreateCard extends Component {\n  // this.state.name ::: will be used for store name field\n  // this.state.desc ::: will be used for store desc field\n  // this.state.card ::: will be used for store cards details\n  // this.state.listId ::: will be used for store listId\n  // this.state.redirect ::: will be used for redirect to list view if board is not created\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: \"\",\n      desc: \"\",\n      card: [],\n      listId: \"\",\n      redirect: false\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handleDescChange = this.handleDescChange.bind(this);\n  }\n\n  // Validate listId\n  // Fetch Card details\n  componentDidMount = () => {\n    var redirect = true;\n    let params = queryString.parse(this.props.location.search);\n    var listId = params.lId;\n    if (\n      listId != null &&\n      listId.trim().length > 0 &&\n      this.isListExists(listId)\n    ) {\n      redirect = false;\n    }\n\n    this.updateState(\"listId\", listId);\n    this.updateState(\"redirect\", redirect);\n\n    var catchedCard = this.getItem(\"zoomRx-card-\" + listId);\n    if (catchedCard != null && catchedCard.length > 0) {\n      this.updateState(\"card\", JSON.parse(catchedCard));\n    }\n  };\n\n  // Update state info\n  updateState = (key, value) => {\n    let sobj = {};\n    sobj[key] = value;\n    this.setState(sobj);\n  };\n\n  // Set state info in local storage\n  setItem = (key, value) => {\n    window.localStorage.setItem(key, value);\n  };\n\n  // Fetch state info from local storage\n  getItem = key => {\n    return window.localStorage.getItem(key);\n  };\n\n  // Handle name field\n  handleNameChange(event) {\n    this.updateState(\"name\", event.target.value);\n  }\n\n  // Handle desc field\n  handleDescChange = event => {\n    this.updateState(\"desc\", event.target.value);\n  };\n\n  // Check whether card already created or not\n  isCardExists = () => {\n    var isExists = false;\n    var localCard = this.state.card;\n    var localName = this.state.name;\n    localName = localName.trim();\n    localCard.forEach(cardObj => {\n      if (localName === cardObj.name) {\n        isExists = true;\n      }\n    });\n    return isExists;\n  };\n\n  // Check whether list already created or not\n  isListExists = listId => {\n    var isExists = false;\n    var catchedList = this.getItem(\"zoomRx-list\");\n    if (catchedList != null && catchedList.length > 0) {\n      catchedList = JSON.parse(catchedList);\n      catchedList.forEach(listObj => {\n        if (listId === \"\" + listObj.id) {\n          isExists = true;\n        }\n      });\n    }\n    return isExists;\n  };\n\n  // Handle creating card details\n  handleSubmit = event => {\n    event.preventDefault();\n    var localName = this.state.name;\n    var localDesc = this.state.desc;\n    localName = localName.trim();\n    if (localName.length === 0) {\n      alert(\"Card name is required\");\n    } else if (localName.length < 5) {\n      alert(\"Card name must be at least 5 characters\");\n    } else if (localDesc.length === 0) {\n      alert(\"Description is required\");\n    } else if (localDesc.length > 2000) {\n      alert(\"Description length cannot be more than 1000 character\");\n    } else if (this.isCardExists()) {\n      alert(\"Card name is already exists\");\n    } else {\n      var localCard = this.state.card;\n      var localListId = this.state.listId;\n      localCard.push({\n        id: new Date().getTime(),\n        name: localName,\n        desc: localDesc\n      });\n\n      this.updateState(\"redirect\", true);\n      this.updateState(\"card\", localCard);\n      this.setItem(\"zoomRx-card-\" + localListId, JSON.stringify(localCard));\n    }\n  };\n\n  // Redirect to list view if card is created by successfully\n  renderRedirect = () => {\n    if (this.state.redirect) {\n      return <Redirect to=\"/list\" />;\n    }\n  };\n\n  // rendering UI\n  render() {\n    return (\n      <React.Fragment>\n        {this.renderRedirect()}\n        <div className=\"Board-parent\">\n          <div className=\"Board-container\">\n            <form className=\"Board-main fleft\" onSubmit={this.handleSubmit}>\n              <label className=\"Board-label fleft\">Create Card</label>\n              <input\n                className=\"Board-input\"\n                type=\"text\"\n                placeholder=\"Card Name\"\n                value={this.state.name}\n                onChange={this.handleNameChange}\n              />\n              <textarea\n                className=\"Board-textarea\"\n                rows=\"4\"\n                cols=\"50\"\n                type=\"text\"\n                placeholder=\"Description\"\n                value={this.state.desc}\n                onChange={this.handleDescChange}\n              />\n              <button className=\"Board-button cpointer\">Create</button>\n            </form>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default CreateCard;\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport \"../styles/board.css\";\n\nclass Board extends Component {\n  // this.state.name ::: will be used for assign board name\n  // this.state.redirect ::: will be used for redirect to list view if board is already created\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: \"\",\n      redirect: false\n    };\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handleBoardSubmit = this.handleBoardSubmit.bind(this);\n  }\n\n  // Fetching board info from local storage\n  componentDidMount = () => {\n    var boardName = this.getItem(\"zoomRx-task\");\n    if (boardName && boardName.length > 0) {\n      this.updateState(\"name\", boardName);\n      this.updateState(\"redirect\", true);\n    }\n  };\n\n  // Update state info\n  updateState = (key, value) => {\n    let sobj = {};\n    sobj[key] = value;\n    this.setState(sobj);\n  };\n\n  // Set state info in local storage\n  setItem = (key, value) => {\n    window.localStorage.setItem(key, value);\n  };\n\n  // Fetch state info from local storage\n  getItem = key => {\n    return window.localStorage.getItem(key);\n  };\n\n  // Update state whenever user change field\n  handleNameChange = event => {\n    this.updateState(\"name\", event.target.value);\n  };\n\n  // Validate user inut\n  // Udate state and local storage and redirect to list view\n  handleBoardSubmit = event => {\n    event.preventDefault();\n    var localName = this.state.name;\n    localName = localName.trim();\n    if (localName.length === 0) {\n      alert(\"Board name is required\");\n    } else if (localName.length < 5) {\n      alert(\"Board name must be at least 5 characters\");\n    } else {\n      this.updateState(\"redirect\", true);\n      this.setItem(\"zoomRx-task\", localName);\n    }\n  };\n\n  // Redirect to list page if board is already created\n  renderRedirect = () => {\n    if (this.state.redirect) {\n      return <Redirect to=\"/list\" />;\n    }\n  };\n\n  // rendering UI\n  render() {\n    return (\n      <React.Fragment>\n        {this.renderRedirect()}\n        <div className=\"Board-parent\">\n          <div className=\"Board-container\">\n            <form\n              className=\"Board-main fleft\"\n              onSubmit={this.handleBoardSubmit}\n            >\n              <label className=\"Board-label fleft\">Create Board</label>\n              <input\n                className=\"Board-input\"\n                type=\"text\"\n                placeholder=\"Board Name\"\n                value={this.state.name}\n                onChange={this.handleNameChange}\n              />\n              <button className=\"Board-button cpointer\">Create</button>\n            </form>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport { Route, Link, Switch } from \"react-router-dom\";\n\nimport List from \"./components/list\";\nimport Card from \"./components/card\";\nimport CreateList from \"./components/createList\";\nimport CreateCard from \"./components/createCard\";\nimport Board from \"./components/board\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    const App = () => (\n      <Switch>\n        <Route exact path=\"/\" component={Board} />\n        <Route exact path=\"/list\" component={List} />\n        <Route exact path=\"/card\" component={Card} />\n        <Route exact path=\"/createlist\" component={CreateList} />\n        <Route exact path=\"/createcard\" component={CreateCard} />\n      </Switch>\n    );\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <span className=\"App-icon fleft\" />\n          <Link to=\"/\" className=\"App-name fleft cpointer\">\n            To Do App\n          </Link>\n        </header>\n\n        <div className=\"App-container fleft\">\n          <Switch>\n            <App />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// newly added import\nimport { HashRouter } from \"react-router-dom\";\n\n// Added router wrapper for react-router\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}